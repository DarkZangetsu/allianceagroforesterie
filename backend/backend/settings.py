"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
import pymysql
pymysql.install_as_MySQLdb()
from decouple import config
import ast

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--61qj^dldn6)8!fka8bt3j6up&p(d5%w)o6jh2q)z)_1-6d0v8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Fonction utilitaire pour les listes d'environnement
def get_list_env(var, default=None):
    val = os.getenv(var)
    if val:
        # Supporte format JSON ou liste séparée par virgule
        try:
            return ast.literal_eval(val)
        except Exception:
            return [v.strip() for v in val.split(',') if v.strip()]
    return default or []

# Hosts autorisés
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'allianceagroforesterie.mg',
    'administration.allianceagroforesterie.mg',
    'api.allianceagroforesterie.mg',
    '0.0.0.0',
    '91.204.209.201'
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'graphene_django',
    'graphql_jwt.refresh_token.apps.RefreshTokenConfig',
    'corsheaders',
    'parcelles',
]

# Configuration pour proxy reverse et HTTPS
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Détection HTTPS dynamique
def is_production_https():
    """Détecte si on est en environnement HTTPS de production"""
    return any([
        os.environ.get('HTTPS') == 'on',
        os.environ.get('HTTP_X_FORWARDED_PROTO') == 'https',
        os.environ.get('DJANGO_ENV') == 'production',
        'administration.allianceagroforesterie.mg' in os.environ.get('HTTP_HOST', '')
    ])

# Configuration des cookies conditionnelle pour HTTPS/HTTP
IS_PRODUCTION_HTTPS = is_production_https()

# Configuration des cookies de session
SESSION_COOKIE_SECURE = IS_PRODUCTION_HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_DOMAIN = None
SESSION_COOKIE_PATH = '/'
SESSION_COOKIE_AGE = 86400  # 24 heures
SESSION_COOKIE_NAME = 'sessionid'
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Middleware SANS CsrfViewMiddleware - TOTALEMENT RETIRÉ + Middleware custom
MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'parcelles.middleware.DisableCSRFMiddleware',  # Middleware personnalisé pour désactiver CSRF
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# DÉSACTIVATION COMPLÈTE DE CSRF
# CSRF_FAILURE_VIEW = None  # Cette ligne causait l'erreur - supprimée
CSRF_COOKIE_SECURE = False
CSRF_USE_SESSIONS = False

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DB', 'allianc4_allianceagroBD'),
        'USER': os.getenv('MYSQL_USER', 'allianc4_allianceagroBD'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD', 'XHB2YTrxtrGpHRsbRcQF'),
        'HOST': os.getenv('MYSQL_HOST', 'localhost'),
        'PORT': os.getenv('MYSQL_PORT', '3306'),
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / "db.sqlite3",
#     }
# }


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_TZ = True

# CORRECTION PRINCIPALE : Configuration WhiteNoise simplifiée et correcte
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Configuration complète des fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Répertoires de fichiers statiques pour le développement
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
] if DEBUG else []


# Configuration WhiteNoise optimisée
WHITENOISE_USE_FINDERS = DEBUG
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_INDEX_FILE = True

# IMPORTANT : Configuration pour servir les fichiers admin Django
WHITENOISE_STATIC_PREFIX = '/static/'

# Types MIME pour WhiteNoise
WHITENOISE_MIMETYPES = {
    '.css': 'text/css',
    '.js': 'application/javascript',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject',
}

# Servir les fichiers admin même avec WhiteNoise
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

WHITENOISE_COMPRESSION = False

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'parcelles.User'

# GraphQL
GRAPHENE = {
    'SCHEMA': 'parcelles.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# JWT Settings
GRAPHQL_JWT = {
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_EXPIRATION_DELTA': timedelta(hours=24),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_AUTH_HEADER_TYPES': ('JWT',),
}

# CORS Settings
CORS_ALLOWED_ORIGINS = get_list_env('CORS_ALLOWED_ORIGINS', [
    "https://allianceagroforesterie.mg",
    'http://administration.allianceagroforesterie.mg',
    'https://administration.allianceagroforesterie.mg',
    'http://api.allianceagroforesterie.mg',
    'https://api.allianceagroforesterie.mg',
])

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False

# Autoriser tous les headers nécessaires pour Apollo Client
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-requested-with',
    'apollo-require-preflight',
]

# Autoriser toutes les méthodes HTTP
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# File Upload Settings
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# Maximum file upload size (10MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760

# Configuration de sécurité pour la production
if IS_PRODUCTION_HTTPS:
    # Headers de sécurité HTTPS
    SECURE_SSL_REDIRECT = False  # Géré par le proxy
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'
    
# Logging simplifié sans CSRF
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Créer le répertoire des logs s'il n'existe pas
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Configuration pour servir les fichiers admin en développement
if DEBUG:
    # Assurer que les fichiers statiques de l'admin sont servis
    import django
    from django.conf.urls.static import static
    
# Configuration additionnelle pour le proxy PHP
# Ces paramètres aident le proxy à mieux gérer les requêtes
APPEND_SLASH = True
PREPEND_WWW = False

# Configuration spéciale pour les requêtes via proxy
ALLOWED_HOSTS_UNSAFE = False  # Gardez False pour la sécurité

# Variables d'environnement pour debug (optionnel)
if DEBUG:
    print(f"IS_PRODUCTION_HTTPS: {IS_PRODUCTION_HTTPS}")
    print(f"SESSION_COOKIE_SECURE: {SESSION_COOKIE_SECURE}")
    print("CSRF Protection: DISABLED")

# DÉSACTIVATION TOTALE ET EXPLICITE DE CSRF
# Cette section force la désactivation de toute vérification CSRF
import django.conf.global_settings as DEFAULT_SETTINGS

# Configuration explicite pour désactiver CSRF
USE_CSRF = False

# Monkey patch pour désactiver complètement CSRF au niveau système
try:
    import django.middleware.csrf
    # Remplacer le middleware CSRF par un middleware vide
    original_csrf_middleware = django.middleware.csrf.CsrfViewMiddleware
    
    class DummyCSRFMiddleware:
        def __init__(self, get_response):
            self.get_response = get_response
        
        def __call__(self, request):
            setattr(request, '_dont_enforce_csrf_checks', True)
            return self.get_response(request)
        
        def process_view(self, request, view_func, view_args, view_kwargs):
            setattr(request, '_dont_enforce_csrf_checks', True)
            return None
    
    django.middleware.csrf.CsrfViewMiddleware = DummyCSRFMiddleware
    
    print("CSRF Middleware successfully disabled via monkey patch")
except Exception as e:
    print(f"Warning: Could not monkey patch CSRF middleware: {e}")

# Supprimer les vérifications CSRF du système de checks
SILENCED_SYSTEM_CHECKS = [
    'security.W004',  # SECURE_HSTS_SECONDS warning
    'security.W008',  # SECURE_BROWSER_XSS_FILTER warning
    'security.W003',  # CSRF_COOKIE_SECURE warning
    'security.W016',  # CSRF_COOKIE_HTTPONLY warning
    'security.W017',  # CSRF_FAILURE_VIEW warning
]